'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
module.paths.push(path_1.join(Editor.App.path, 'node_modules'));
// @ts-ignore
const cc_1 = require("cc");
const fs_1 = require("fs");
const NAME = 'Reference-Image';
exports.methods = {
    // 通过图片创建参考图
    async getTargets() {
        let canvas = cc_1.find(`Editor Scene Background/${NAME}-Canvas`);
        if (!canvas) {
            canvas = new cc_1.PrivateNode(`${NAME}-Canvas`);
            canvas.addComponent(cc_1.Canvas);
            canvas.parent = cc_1.find('Editor Scene Background');
        }
        let node = canvas.getChildByName(NAME);
        if (!node) {
            node = new cc_1.PrivateNode(NAME);
            node.parent = canvas;
        }
        node.active = await Editor.Profile.getConfig('reference-image', 'show');
        let sprite = node.getComponent(cc_1.Sprite) || node.addComponent(cc_1.Sprite);
        const color = sprite.color;
        color.a = await Editor.Profile.getConfig('reference-image', 'opacity') || 100;
        sprite.color = color;
        cce.Engine.repaintInEditMode();
        return {
            node,
            sprite
        };
    },
    // 移动参考图
    async moveX(x) {
        const { node } = await this.getTargets();
        const position = node.position;
        position.x = x;
        node.position = position;
        cce.Engine.repaintInEditMode();
    },
    async moveY(y) {
        const { node } = await this.getTargets();
        const position = node.position;
        position.y = y;
        node.position = position;
        cce.Engine.repaintInEditMode();
    },
    async setOpacity(opacity) {
        const { sprite } = await this.getTargets();
        const color = sprite.color;
        color.a = opacity;
        sprite.color = color;
        cce.Engine.repaintInEditMode();
    },
    // 切换参考图
    async switchImages(path) {
        const { sprite } = await this.getTargets();
        let data = fs_1.readFileSync(path);
        data = new Buffer(data).toString('base64');
        let image = new Image();
        image.src = 'data:png;base64,' + data;
        image.onload = () => {
            sprite.spriteFrame = cc_1.SpriteFrame.createWithImage(image);
            cce.Engine.repaintInEditMode();
        };
    },
    // 清空
    async resetImage() {
        const { sprite } = await this.getTargets();
        sprite.spriteFrame = null;
        cce.Engine.repaintInEditMode();
    },
    // 设置参考图是否显示
    async setImageVisible(value) {
        const { node } = await this.getTargets();
        node.active = value;
        if (value) {
            let images = await Editor.Profile.getConfig('reference-image', 'images');
            if (images && images.length === 0) {
                Editor.Panel.open('reference-image');
            }
        }
        cce.Engine.repaintInEditMode();
    }
};
//# sourceMappingURL=data:application/json;base64,