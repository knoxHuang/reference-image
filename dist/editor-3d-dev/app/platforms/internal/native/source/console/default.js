"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleParams = exports.PLUGIN_NAME_ENUM = exports.LANGUAGE = exports.PLATFORM_ENUM = exports.DEFAULT_VALUES = void 0;
exports.DEFAULT_VALUES = {
    QUIET: false,
    IOS_BUNDLE_ID: 'com.cocos.demo',
    MAC_BUNDLE_ID: 'com.cocos.demo',
    ANDROID_BUNDLE_ID: 'com.cocos.demo',
    CMAKE_GENERATOR: '',
    CMAKE_PATH: '',
    TEAM_ID: '',
};
var PLATFORM_ENUM;
(function (PLATFORM_ENUM) {
    PLATFORM_ENUM["UNKNOWN"] = "unknown";
    PLATFORM_ENUM["IOS"] = "ios";
    PLATFORM_ENUM["MAC"] = "mac";
    PLATFORM_ENUM["WIN32"] = "win32";
    PLATFORM_ENUM["ANDROID"] = "android";
    PLATFORM_ENUM["IOSSIMULATOR"] = "iossimulator";
    PLATFORM_ENUM["HUAWEI-AGC"] = "huawei-agc";
})(PLATFORM_ENUM = exports.PLATFORM_ENUM || (exports.PLATFORM_ENUM = {}));
var LANGUAGE;
(function (LANGUAGE) {
    LANGUAGE[LANGUAGE["JS"] = 0] = "JS";
})(LANGUAGE = exports.LANGUAGE || (exports.LANGUAGE = {}));
var PLUGIN_NAME_ENUM;
(function (PLUGIN_NAME_ENUM) {
    PLUGIN_NAME_ENUM["NEW"] = "New";
    PLUGIN_NAME_ENUM["COMPILE"] = "Compile";
    PLUGIN_NAME_ENUM["GENERATE"] = "Generate";
    PLUGIN_NAME_ENUM["RUN"] = "Run";
})(PLUGIN_NAME_ENUM = exports.PLUGIN_NAME_ENUM || (exports.PLUGIN_NAME_ENUM = {}));
/**
 * cocos console 的参数类
 */
class ConsoleParams {
    constructor() {
        this.quiet = false;
        this.portrait = false;
        this.platform = PLATFORM_ENUM.ANDROID;
        this.language = LANGUAGE.JS;
        this.projDir = '';
        this.buildDir = '';
        this.directory = '';
        this.enginePath = '';
        this.templateName = '';
        this.cmakeGenerator = '';
        this.cmakePath = '';
        this.teamid = '';
        this.sharedDir = '';
        this.pluginName = PLUGIN_NAME_ENUM.NEW;
        this.projectName = '';
        this.debug = true;
        this.cMakeConfig = {
            CC_USE_GLES3: false,
            CC_USE_GLES2: true,
        };
        this.orientation = '';
        this.android = {
            packageName: exports.DEFAULT_VALUES.ANDROID_BUNDLE_ID,
            keyStorePath: '',
            sdkPath: '',
            ndkPath: '',
            androidInstant: false,
            remoteUrl: '',
            apiLevel: 27,
            appABIs: [],
            keystorePassword: '',
            keystoreAlias: '',
            keystoreAliasPassword: '',
            appBundle: false,
            orientation: {
                portrait: true,
                landscapeLeft: false,
                landscapeRight: false,
                upsideDown: false
            }
        };
        this.ios = {
            bundleId: exports.DEFAULT_VALUES.IOS_BUNDLE_ID,
            simulator: false,
            orientation: {
                portrait: true,
                landscapeLeft: false,
                landscapeRight: false,
                upsideDown: false
            }
        };
        this.mac = {
            bundleId: exports.DEFAULT_VALUES.MAC_BUNDLE_ID,
        };
    }
    toJSON() {
        const res = {};
        Object.keys(this).forEach((key) => {
            res[key] = this[key];
        });
        return res;
    }
}
exports.ConsoleParams = ConsoleParams;
//# sourceMappingURL=data:application/json;base64,