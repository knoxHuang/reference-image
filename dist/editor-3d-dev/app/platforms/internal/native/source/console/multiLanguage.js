"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCurrentString = exports.hasKey = exports.getString = exports.setCurrentLanguage = void 0;
const path = require("path");
const fs = require("fs");
const cfgInfo = require("./strings");
// const CONFIGFILENAME = "strings.json";
const DEFAULTLANGUAGE = "en";
let locale = null;
let curLangString = null;
let defaultLangString = null;
function getEnvLocale() {
    const defaultRet = { lang: "en" };
    let env = process.env;
    let langEncoding = env.LCALL || env.LCMESSAGES || env.LANG || env.LANGUAGE || Intl.DateTimeFormat().resolvedOptions().locale;
    if (!langEncoding) {
        return defaultRet;
    }
    let p2 = langEncoding.split(".");
    return { lang: p2[0] || defaultRet.lang };
}
function getAvaiableLangs() {
    if (!!cfgInfo) {
        return Object.keys(cfgInfo);
    }
    return [];
}
function getLangKey(lang) {
    let p2 = lang.split("_");
    if (p2[0] == "zh")
        return (p2.length == 1 || p2[1] == "cn") ? "zh" : "zhTr";
    return p2[0];
}
function doInit() {
    locale = getEnvLocale();
    curLangString = cfgInfo[getLangKey(locale.lang)];
    if (!curLangString) {
        curLangString = cfgInfo[DEFAULTLANGUAGE];
    }
    defaultLangString = cfgInfo[DEFAULTLANGUAGE];
}
doInit();
function setCurrentLanguage(lang) {
    let langKey = getLangKey(lang);
    if (lang in cfgInfo) {
        curLangString = cfgInfo[lang];
        locale.lang = lang;
    }
    else if (langKey in cfgInfo) {
        curLangString = cfgInfo[langKey];
        locale.lang = langKey;
    }
    else {
        console.warn();
    }
}
exports.setCurrentLanguage = setCurrentLanguage;
function getString(key, ...fmts) {
    if (curLangString) {
        let fmt = curLangString[key];
        if (!fmt) {
            return `[KEY "${key}" is not found! lang: ${locale.lang}]`;
        }
        if (fmts.length == 0) {
            return fmt;
        }
        let chars = Array.from(fmt);
        let ret = [];
        let len = chars.length;
        let p = 0;
        let ai = 0;
        let placeHolders = 0;
        while (p < len) {
            if (chars[p] == "%") {
                if (chars[p + 1] == "d" || chars[p + 1] == "f") {
                    ret.push(fmts[ai++] + ""); // %d | %f
                    placeHolders++;
                }
                else if (chars[p + 1] == "s") {
                    ret.push(fmts[ai++] + ""); // %s
                    placeHolders++;
                }
                else if (chars[p + 1] == "%") {
                    ret.push("%"); // %%
                }
                else {
                    // unknown formatter?
                    ret.push(fmts[ai++] + ""); // %?
                    placeHolders++;
                }
                p += 2;
            }
            else {
                ret.push(chars[p]);
                p += 1;
            }
        }
        if (placeHolders != fmts.length) {
            console.error(`format argument mismatch: ${fmt} & ${fmts.join(", ")}`);
        }
        return ret.join("");
    }
    return `[language ${locale.lang} not set, key ${key}]`;
}
exports.getString = getString;
function hasKey(key, data) {
    return !!data && (key in data);
}
exports.hasKey = hasKey;
function getCurrentString(key) {
    let ret;
    if (hasKey(key, curLangString)) {
        ret = curLangString[key];
    }
    else if (hasKey(key, defaultLangString)) {
        ret = defaultLangString[key];
    }
    return ret || key;
}
exports.getCurrentString = getCurrentString;
//# sourceMappingURL=data:application/json;base64,