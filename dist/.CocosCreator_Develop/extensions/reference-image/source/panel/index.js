'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.close = exports.ready = exports.methods = exports.$ = exports.template = exports.style = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const { I18n, Message, Dialog, Profile } = Editor;
exports.style = fs_1.readFileSync(path_1.join(__dirname, '../../dist/index.css'), 'utf8');
exports.template = fs_1.readFileSync(path_1.join(__dirname, '../../../static/index.html'), 'utf8');
exports.$ = {
    images: '.images',
    btnAdd: '.add-images',
    btnDel: '.del-images',
    x: '.x',
    y: '.y',
    opacity: '.opacity'
};
exports.methods = {
    pushImage(path) {
    },
    async onAddImage() {
        const result = await Dialog.select({
            title: I18n.t('reference-image.dialog.add-image-title'),
            path: await Profile.getConfig('reference-image', 'add-image-path') || '',
            filters: [{ name: 'image', extensions: ['png', 'jpg'] }],
        });
        if (!result || !result.filePaths[0]) {
            return;
        }
        for (let path in result.filePaths) {
            this.pushImage(path);
        }
        //
        const path = path_1.dirname(result.filePaths[0]);
        await Profile.setConfig('reference-image', 'add-image-path', path);
    },
    async onDelImage() {
        const result = await Dialog.info(I18n.t('reference-image.dialog.del_image_message'), {
            buttons: [
                I18n.t('reference-image.dialog.yes'),
                I18n.t('reference-image.dialog.cancel'),
            ],
            default: 0,
            cancel: 1,
        });
        if (result.response === 0) {
        }
    },
    async switchImages(path) {
        await Message.request('scene', 'execute-scene-script', {
            name: 'reference-image',
            method: 'switchImages',
            args: [path],
        });
        await Profile.setConfig('reference-image', 'path', path);
    },
    async onMoveX(event) {
        // @ts-ignore
        const x = event.target.value;
        await Message.request('scene', 'execute-scene-script', {
            name: 'reference-image',
            method: 'moveX',
            args: [x],
        });
        await Profile.setConfig('reference-image', 'x', x);
    },
    async onMoveY(event) {
        // @ts-ignore
        const y = event.target.value;
        await Message.request('scene', 'execute-scene-script', {
            name: 'reference-image',
            method: 'moveY',
            args: [y],
        });
        await Profile.setConfig('reference-image', 'y', y);
    },
    async onSetOpacity(event) {
        // @ts-ignore
        const opacity = event.target.value;
        await Message.request('scene', 'execute-scene-script', {
            name: 'reference-image',
            method: 'setOpacity',
            args: [opacity],
        });
        await Profile.setConfig('reference-image', 'opacity', opacity);
    },
    registerEventListeners() {
        // @ts-ignore
        const $ = this.$;
        $.x.addEventListener('confirm', this.onMoveX);
        $.y.addEventListener('confirm', this.onMoveY);
        $.opacity.addEventListener('confirm', this.onSetOpacity);
        $.images.addEventListener('confirm', this.switchImages);
        $.btnAdd.addEventListener('click', this.onAddImage);
        $.btnDel.addEventListener('click', this.onDelImage);
    },
    unregisterEventListeners() {
        // @ts-ignore
        const $ = this.$;
        $.x.removeEventListener('confirm', this.onMoveX);
        $.y.removeEventListener('confirm', this.onMoveY);
        $.opacity.removeEventListener('confirm', this.onSetOpacity);
        $.images.removeEventListener('confirm', this.switchImages);
        $.btnAdd.removeEventListener('click', this.onAddImage);
        $.btnDel.removeEventListener('click', this.onDelImage);
    }
};
exports.ready = async function () {
    // @ts-ignore
    const panel = this;
    panel.registerEventListeners();
    panel.$.x.value = await Profile.getConfig('reference-image', 'x') || 0;
    panel.$.y.value = await Profile.getConfig('reference-image', 'y');
    panel.$.opacity.value = await Profile.getConfig('reference-image', 'opacity');
    panel.$.images.value = await Profile.getConfig('reference-image', 'index');
    const images = await Profile.getConfig('reference-image', 'images');
    for (let path in images) {
        panel.pushImage(path);
    }
};
exports.close = function () {
    // @ts-ignore
    const panel = this;
    panel.unregisterEventListeners();
};
//# sourceMappingURL=data:application/json;base64,